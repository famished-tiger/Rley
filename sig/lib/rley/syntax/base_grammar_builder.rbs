module Rley
  module Syntax
    # Builder GoF pattern. Builder builds a complex object
    #   (say, a grammar) from simpler objects (terminals and productions)
    #   and using a step by step approach.
    class BaseGrammarBuilder
      @symbols: Hash[String, GrmSymbol]

      @productions: Array[Production]

      @grammar: Grammar

      # @return [Hash{String, GrmSymbol}] The mapping of grammar symbol names
      #   to the matching grammar symbol object.
      attr_reader symbols: Hash[String, GrmSymbol]

      # @return [Array<Production>] The list of production rules for
      #   the grammar to build.
      attr_reader productions: Array[Production]

      # Creates a new grammar builder.
      # @param aBlock [Proc] code block used to build the grammar.
      # @example Building a tiny English grammar
      #   builder = Rley::Syntax::GrammarBuilder.new do
      #     add_terminals('n', 'v', 'adj', 'det')
      #     rule 'S' => %w[NP VP]
      #     rule 'VP' => %w[v NP]
      #     rule 'NP' => %w[det n]
      #     rule 'NP' => %w[adj NP]
      #   end
      #   tiny_eng = builder.grammar
      def initialize: () ?{ (?) -> void } -> void

      # Retrieve a grammar symbol from its name.
      # Raise an exception if not found.
      # @param aSymbolName [String] the name of a grammar symbol.
      # @return [GrmSymbol] the retrieved symbol object.
      def []: (String aSymbolName) -> GrmSymbol

      # Add the given terminal symbols to the grammar of the language
      # @param terminalSymbols [String or Terminal] 1..* terminal symbols.
      # @return [void]
      def add_terminals: (*(String | Terminal) terminalSymbols) -> Hash[String, GrmSymbol]

      # Add the given marker symbol to the grammar of the language
      # @param aMarkerSymbol [Syntax::Marker] A marker symbol
      # @return [void]
      def add_marker: (Marker aMarkerSymbol) -> void

      # Add a production rule in the grammar given one
      # key-value pair of the form: String => Array.
      #   Where the key is the name of the non-terminal appearing in the
      #   left side of the rule.
      #   The value, an Array, is a sequence of grammar symbol names.
      # The rule is created and inserted in the grammar.
      # @example Equivalent call syntaxes
      #   builder.add_production('A' => ['a', 'A', 'c'])
      #   builder.rule('A' => ['a', 'A', 'c']) # 'rule' is a synonym
      #   builder.rule('A' => %w[a A  c]) # Use %w syntax for Array of String
      #   builder.rule 'A' => %w[a A  c]  # Call parentheses are optional
      # @param aProductionRepr [Hash{String, Array<String>}]
      #   A Hash-based representation of a production.
      # @return [Production] The created Production instance
      def add_production: (Hash[String, String] aProductionRepr) -> Production

      # Given the grammar symbols and productions added to the builder,
      # build the resulting grammar (if not yet done).
      # @return [Grammar] the created grammar object.
      def grammar: () -> Grammar

      # When a symbol, say symb, in a rhs is followed by a '+' modifier,
      # then a rule will be generated with a lhs named symb + suffix_plus
      def suffix_plus: () -> "_plus"

      def suffix_plus_more: () -> "base_plus_more"

      def suffix_plus_last: () -> "base_plus_last"

      alias rule add_production

      private

      # Add the given grammar symbols.
      # @param aClass [Class] The class of grammar symbols to instantiate.
      # @param theSymbols [Array] array of elements are treated as follows:
      #   if the element is already a grammar symbol, then it added as is,
      #   otherwise it is considered as the name of a grammar symbol
      # of the specified class to build.
      def build_symbols: (Class aClass, Array[GrmSymbol | String] theSymbols) -> Hash[String, GrmSymbol]

      # If the argument is already a grammar symbol object then it is
      # returned as is. Otherwise, the argument is treated as a name
      # for a new instance of the given class.
      # @param aClass [Class] The class of grammar symbols to instantiate
      # @param aSymbolArg [GrmSymbol-like or String]
      # @return [Array] list of grammar symbols
      def build_symbol: (Class aClass, GrmSymbol | String aSymbolArg) -> GrmSymbol

      # Retrieve the non-terminal symbol with given name.
      # If it doesn't exist yet, then it is created on the fly.
      # @param aSymbolName [String] the name of the grammar symbol to retrieve
      # @return [NonTerminal]
      def get_grm_symbol: (String aSymbolName) -> NonTerminal
    end
  end
end
