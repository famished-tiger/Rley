module Rley
  module RGN
    # Abstract class.
    # Instances of its subclasses represent nodes of an abstract syntax tree
    # that is the product of the parse of an input text.
    class ASTNode
      @annotation: Hash[String, untyped]

      @repetition: untyped

      # @return [Hash]
      attr_reader annotation: Hash[String, untyped]

      def initialize: () -> void

      def annotation=: (Hash[String, untyped] aMapping) -> Hash[String, untyped]

      def annotation_to_text: () -> ::String

      # Notification that the parsing has successfully completed
      def done!: () -> nil

      def name: () -> String

      def to_text: () -> String

      # Abstract method (must be overriden in subclasses).
      # Part of the 'visitee' role in Visitor design pattern.
      # @param _visitor [ASTVisitor] the visitor
      def accept: (ASTVisitor _visitor) -> void
    end
  end
end
