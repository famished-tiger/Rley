module Rley
  module ParseRep
    # Abstract class (to be subclassed).
    # The purpose of an ASTBaseBuilder is to build piece by piece an AST
    # (Abstract Syntax Tree) from a sequence of input tokens and
    # visit events produced by walking over a GFGParsing object.
    # It is an implementation of the Builder GoF pattern.
    # The Builder pattern creates a complex object
    # (say, a parse tree) from simpler objects (terminal and non-terminal
    # nodes) and using a step by step approach.
    class ASTBaseBuilder < ParseTreeBuilder
      # Method to override in subclass.
      # Returns a Hash
      # @return [Hash{String => Class}, Hash{String => Hash{String => Class}}]
      #   Returned hash contains pairs of the form:
      #   terminal name => Class implementing the terminal tokens
      #   terminal name => Hash with pairs: production name => Class
      def terminal2node: () -> Hash[String, (Class | Hash[String, Class])]

      # Method to override in subclass.
      # Default class for representing terminal nodes.
      # @return [Class]
      def terminalnode_class: () -> Class

      # Default method name to invoke when production
      # with given name is invoked.
      # Override this method for other method naming convention.
      # @param aProductionName [String]
      # @return [String]
      def method_name: (String aProductionName) -> ::String

      # Utility method.
      # Simply return the first child node
      # @param _range [Lexical::TokenRange]
      # @param _tokens [Array<Lexical::Token>]
      # @param theChildren [Array<Object>]
      def return_first_child: (Lexical::TokenRange _range, Array[Lexical::Token] _tokens, Array[untyped] theChildren) -> untyped

      # Utility method.
      # Simply return the second child node
      # @param _range [Lexical::TokenRange]
      # @param _tokens [Array<Lexical::Token>]
      # @param theChildren [Array<Object>]
      def return_second_child: (Lexical::TokenRange _range, Array[Lexical::Token] _tokens, Array[untyped] theChildren) -> untyped

      # Utility method.
      # Simply return the last child node
      # @param _range [Lexical::TokenRange]
      # @param _tokens [Array<Lexical::Token>]
      # @param theChildren [Array<Object>]
      def return_last_child: (Lexical::TokenRange _range, Array[Lexical::Token] _tokens, Array[untyped] theChildren) -> untyped

      # Simply return an epsilon symbol
      # @param _range [Lexical::TokenRange]
      # @param _tokens [Array<Lexical::Token>]
      # @param _children [Array<Object>]
      def return_epsilon: (Lexical::TokenRange _range, Array[Lexical::Token] _tokens, Array[untyped] _children) -> nil

      # Overriding method.
      # Create a parse tree object with given
      # node as root node.
      def create_tree: (PTree::ParseTreeNode aRootNode) -> PTree::ParseTree

      # Factory method for creating a node object for the given
      # input token.
      # @param aProduction [Syntax::Production] Relevant production rule
      # @param aTerminal [Syntax::Terminal] Terminal associated with the token
      # @param aTokenPosition [Integer] Position of token in the input stream
      # @param aToken [Lexical::Token] The input token
      def new_leaf_node: (Syntax::Production aProduction, Syntax::Terminal aTerminal, Integer aTokenPosition, Lexical::Token aToken) -> untyped

      # Method to override.
      # Factory method for creating a parent node object.
      # @param aProduction [Production] Production rule
      # @param aRange [Range] Range of tokens matched by the rule
      # @param theTokens [Array] The input tokens
      # @param theChildren [Array] Children nodes (one per rhs symbol)
      def new_parent_node: (Syntax::Production aProduction, Lexical::TokenRange aRange, Array[Lexical::Token] theTokens, Array[PTree::ParseTreeNode] theChildren) -> PTree::ParseTreeNode

      # Implicit rule generated for * modifier
      # rule('X') => 'X item'.as '_star_more'
      def reduce__star_more: (Syntax::Production _production, Lexical::TokenRange _range, Array[Lexical::Token] _tokens, Array[PTree::ParseTreeNode] theChildren) -> PTree::ParseTreeNode

      # Implicit rule generated for * modifier
      # rule('X') => ''.as '_star_none'
      def reduce__star_none: (Syntax::Production _production, Lexical::TokenRange _range, Array[Lexical::Token] _tokens, Array[PTree::ParseTreeNode] _children) -> ::Array[PTree::ParseTreeNode]

      # Implicit rule generated for + modifier
      # rule('X') => 'X item'.as '_plus_more'
      def reduce__plus_more: (Syntax::Production _production, Lexical::TokenRange _range, Array[Lexical::Token] _tokens, Array[PTree::ParseTreeNode] theChildren) -> PTree::ParseTreeNode

      # Implicit rule generated for + modifier
      # rule('X') => 'item'.as '_plus_one'
      def reduce__plus_one: (Syntax::Production _production, Lexical::TokenRange _range, Array[Lexical::Token] _tokens, Array[PTree::ParseTreeNode] theChildren) -> ::Array[PTree::ParseTreeNode]

      # Implicit rule generated for + modifier
      # rule('X') => 'item'.as '_plus_one'
      def reduce_return_children: (Syntax::Production _production, Lexical::TokenRange _range, Array[Lexical::Token] _tokens, Array[PTree::ParseTreeNode] theChildren) -> Array[PTree::ParseTreeNode]
    end
  end
end
